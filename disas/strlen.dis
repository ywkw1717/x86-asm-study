
a.out:     ファイル形式 elf32-i386


セクション .init の逆アセンブル:

08048354 <_init>:
 8048354:	53                   	push   ebx
 8048355:	83 ec 08             	sub    esp,0x8
 8048358:	e8 c3 00 00 00       	call   8048420 <__x86.get_pc_thunk.bx>
 804835d:	81 c3 a3 1c 00 00    	add    ebx,0x1ca3
 8048363:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
 8048369:	85 c0                	test   eax,eax
 804836b:	74 05                	je     8048372 <_init+0x1e>
 804836d:	e8 6e 00 00 00       	call   80483e0 <__isoc99_scanf@plt+0x10>
 8048372:	83 c4 08             	add    esp,0x8
 8048375:	5b                   	pop    ebx
 8048376:	c3                   	ret    

セクション .plt の逆アセンブル:

08048380 <printf@plt-0x10>:
 8048380:	ff 35 04 a0 04 08    	push   DWORD PTR ds:0x804a004
 8048386:	ff 25 08 a0 04 08    	jmp    DWORD PTR ds:0x804a008
 804838c:	00 00                	add    BYTE PTR [eax],al
	...

08048390 <printf@plt>:
 8048390:	ff 25 0c a0 04 08    	jmp    DWORD PTR ds:0x804a00c
 8048396:	68 00 00 00 00       	push   0x0
 804839b:	e9 e0 ff ff ff       	jmp    8048380 <_init+0x2c>

080483a0 <__stack_chk_fail@plt>:
 80483a0:	ff 25 10 a0 04 08    	jmp    DWORD PTR ds:0x804a010
 80483a6:	68 08 00 00 00       	push   0x8
 80483ab:	e9 d0 ff ff ff       	jmp    8048380 <_init+0x2c>

080483b0 <strlen@plt>:
 80483b0:	ff 25 14 a0 04 08    	jmp    DWORD PTR ds:0x804a014
 80483b6:	68 10 00 00 00       	push   0x10
 80483bb:	e9 c0 ff ff ff       	jmp    8048380 <_init+0x2c>

080483c0 <__libc_start_main@plt>:
 80483c0:	ff 25 18 a0 04 08    	jmp    DWORD PTR ds:0x804a018
 80483c6:	68 18 00 00 00       	push   0x18
 80483cb:	e9 b0 ff ff ff       	jmp    8048380 <_init+0x2c>

080483d0 <__isoc99_scanf@plt>:
 80483d0:	ff 25 1c a0 04 08    	jmp    DWORD PTR ds:0x804a01c
 80483d6:	68 20 00 00 00       	push   0x20
 80483db:	e9 a0 ff ff ff       	jmp    8048380 <_init+0x2c>

セクション .plt.got の逆アセンブル:

080483e0 <.plt.got>:
 80483e0:	ff 25 fc 9f 04 08    	jmp    DWORD PTR ds:0x8049ffc
 80483e6:	66 90                	xchg   ax,ax

セクション .text の逆アセンブル:

080483f0 <_start>:
 80483f0:	31 ed                	xor    ebp,ebp
 80483f2:	5e                   	pop    esi
 80483f3:	89 e1                	mov    ecx,esp
 80483f5:	83 e4 f0             	and    esp,0xfffffff0
 80483f8:	50                   	push   eax
 80483f9:	54                   	push   esp
 80483fa:	52                   	push   edx
 80483fb:	68 f0 85 04 08       	push   0x80485f0
 8048400:	68 90 85 04 08       	push   0x8048590
 8048405:	51                   	push   ecx
 8048406:	56                   	push   esi
 8048407:	68 eb 84 04 08       	push   0x80484eb
 804840c:	e8 af ff ff ff       	call   80483c0 <__libc_start_main@plt>
 8048411:	f4                   	hlt    
 8048412:	66 90                	xchg   ax,ax
 8048414:	66 90                	xchg   ax,ax
 8048416:	66 90                	xchg   ax,ax
 8048418:	66 90                	xchg   ax,ax
 804841a:	66 90                	xchg   ax,ax
 804841c:	66 90                	xchg   ax,ax
 804841e:	66 90                	xchg   ax,ax

08048420 <__x86.get_pc_thunk.bx>:
 8048420:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 8048423:	c3                   	ret    
 8048424:	66 90                	xchg   ax,ax
 8048426:	66 90                	xchg   ax,ax
 8048428:	66 90                	xchg   ax,ax
 804842a:	66 90                	xchg   ax,ax
 804842c:	66 90                	xchg   ax,ax
 804842e:	66 90                	xchg   ax,ax

08048430 <deregister_tm_clones>:
 8048430:	b8 2b a0 04 08       	mov    eax,0x804a02b
 8048435:	2d 28 a0 04 08       	sub    eax,0x804a028
 804843a:	83 f8 06             	cmp    eax,0x6
 804843d:	76 1a                	jbe    8048459 <deregister_tm_clones+0x29>
 804843f:	b8 00 00 00 00       	mov    eax,0x0
 8048444:	85 c0                	test   eax,eax
 8048446:	74 11                	je     8048459 <deregister_tm_clones+0x29>
 8048448:	55                   	push   ebp
 8048449:	89 e5                	mov    ebp,esp
 804844b:	83 ec 14             	sub    esp,0x14
 804844e:	68 28 a0 04 08       	push   0x804a028
 8048453:	ff d0                	call   eax
 8048455:	83 c4 10             	add    esp,0x10
 8048458:	c9                   	leave  
 8048459:	f3 c3                	repz ret 
 804845b:	90                   	nop
 804845c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

08048460 <register_tm_clones>:
 8048460:	b8 28 a0 04 08       	mov    eax,0x804a028
 8048465:	2d 28 a0 04 08       	sub    eax,0x804a028
 804846a:	c1 f8 02             	sar    eax,0x2
 804846d:	89 c2                	mov    edx,eax
 804846f:	c1 ea 1f             	shr    edx,0x1f
 8048472:	01 d0                	add    eax,edx
 8048474:	d1 f8                	sar    eax,1
 8048476:	74 1b                	je     8048493 <register_tm_clones+0x33>
 8048478:	ba 00 00 00 00       	mov    edx,0x0
 804847d:	85 d2                	test   edx,edx
 804847f:	74 12                	je     8048493 <register_tm_clones+0x33>
 8048481:	55                   	push   ebp
 8048482:	89 e5                	mov    ebp,esp
 8048484:	83 ec 10             	sub    esp,0x10
 8048487:	50                   	push   eax
 8048488:	68 28 a0 04 08       	push   0x804a028
 804848d:	ff d2                	call   edx
 804848f:	83 c4 10             	add    esp,0x10
 8048492:	c9                   	leave  
 8048493:	f3 c3                	repz ret 
 8048495:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
 8048499:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

080484a0 <__do_global_dtors_aux>:
 80484a0:	80 3d 28 a0 04 08 00 	cmp    BYTE PTR ds:0x804a028,0x0
 80484a7:	75 13                	jne    80484bc <__do_global_dtors_aux+0x1c>
 80484a9:	55                   	push   ebp
 80484aa:	89 e5                	mov    ebp,esp
 80484ac:	83 ec 08             	sub    esp,0x8
 80484af:	e8 7c ff ff ff       	call   8048430 <deregister_tm_clones>
 80484b4:	c6 05 28 a0 04 08 01 	mov    BYTE PTR ds:0x804a028,0x1
 80484bb:	c9                   	leave  
 80484bc:	f3 c3                	repz ret 
 80484be:	66 90                	xchg   ax,ax

080484c0 <frame_dummy>:
 80484c0:	b8 10 9f 04 08       	mov    eax,0x8049f10
 80484c5:	8b 10                	mov    edx,DWORD PTR [eax]
 80484c7:	85 d2                	test   edx,edx
 80484c9:	75 05                	jne    80484d0 <frame_dummy+0x10>
 80484cb:	eb 93                	jmp    8048460 <register_tm_clones>
 80484cd:	8d 76 00             	lea    esi,[esi+0x0]
 80484d0:	ba 00 00 00 00       	mov    edx,0x0
 80484d5:	85 d2                	test   edx,edx
 80484d7:	74 f2                	je     80484cb <frame_dummy+0xb>
 80484d9:	55                   	push   ebp
 80484da:	89 e5                	mov    ebp,esp
 80484dc:	83 ec 14             	sub    esp,0x14
 80484df:	50                   	push   eax
 80484e0:	ff d2                	call   edx
 80484e2:	83 c4 10             	add    esp,0x10
 80484e5:	c9                   	leave  
 80484e6:	e9 75 ff ff ff       	jmp    8048460 <register_tm_clones>

080484eb <main>:
 80484eb:	8d 4c 24 04          	lea    ecx,[esp+0x4]
 80484ef:	83 e4 f0             	and    esp,0xfffffff0
 80484f2:	ff 71 fc             	push   DWORD PTR [ecx-0x4]
 80484f5:	55                   	push   ebp # スタックフレームの
 80484f6:	89 e5                	mov    ebp,esp # 生成
 80484f8:	51                   	push   ecx
 80484f9:	83 ec 14             	sub    esp,0x14
 80484fc:	65 a1 14 00 00 00    	mov    eax,gs:0x14 # SSPのためのにカナリア値を
 8048502:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax # 入れている？
 8048505:	31 c0                	xor    eax,eax # eaxを0で初期化
 8048507:	c7 45 e8 10 86 04 08 	mov    DWORD PTR [ebp-0x18],0x8048610 # char *s = "flag"
 804850e:	83 ec 0c             	sub    esp,0xc
 8048511:	68 15 86 04 08       	push   0x8048615 # "input(Max is 4 bytes): "
 8048516:	e8 75 fe ff ff       	call   8048390 <printf@plt> # printf
 804851b:	83 c4 10             	add    esp,0x10 # 仮引数分のメモリを解放
 804851e:	83 ec 08             	sub    esp,0x8
 8048521:	8d 45 ef             	lea    eax,[ebp-0x11]
 8048524:	50                   	push   eax
 8048525:	68 2d 86 04 08       	push   0x804862d
 804852a:	e8 a1 fe ff ff       	call   80483d0 <__isoc99_scanf@plt>
 804852f:	83 c4 10             	add    esp,0x10
 8048532:	83 ec 0c             	sub    esp,0xc
 8048535:	8d 45 ef             	lea    eax,[ebp-0x11]
 8048538:	50                   	push   eax
 8048539:	e8 72 fe ff ff       	call   80483b0 <strlen@plt>
 804853e:	83 c4 10             	add    esp,0x10
 8048541:	83 f8 04             	cmp    eax,0x4
 8048544:	76 07                	jbe    804854d <main+0x62>
 8048546:	b8 00 00 00 00       	mov    eax,0x0
 804854b:	eb 25                	jmp    8048572 <main+0x87>
 804854d:	83 ec 0c             	sub    esp,0xc
 8048550:	8d 45 ef             	lea    eax,[ebp-0x11]
 8048553:	50                   	push   eax
 8048554:	e8 57 fe ff ff       	call   80483b0 <strlen@plt>
 8048559:	83 c4 10             	add    esp,0x10
 804855c:	83 ec 08             	sub    esp,0x8
 804855f:	50                   	push   eax
 8048560:	68 31 86 04 08       	push   0x8048631
 8048565:	e8 26 fe ff ff       	call   8048390 <printf@plt>
 804856a:	83 c4 10             	add    esp,0x10
 804856d:	b8 00 00 00 00       	mov    eax,0x0
 8048572:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
 8048575:	65 33 15 14 00 00 00 	xor    edx,DWORD PTR gs:0x14
 804857c:	74 05                	je     8048583 <main+0x98>
 804857e:	e8 1d fe ff ff       	call   80483a0 <__stack_chk_fail@plt>
 8048583:	8b 4d fc             	mov    ecx,DWORD PTR [ebp-0x4]
 8048586:	c9                   	leave  
 8048587:	8d 61 fc             	lea    esp,[ecx-0x4]
 804858a:	c3                   	ret    
 804858b:	66 90                	xchg   ax,ax
 804858d:	66 90                	xchg   ax,ax
 804858f:	90                   	nop

08048590 <__libc_csu_init>:
 8048590:	55                   	push   ebp
 8048591:	57                   	push   edi
 8048592:	56                   	push   esi
 8048593:	53                   	push   ebx
 8048594:	e8 87 fe ff ff       	call   8048420 <__x86.get_pc_thunk.bx>
 8048599:	81 c3 67 1a 00 00    	add    ebx,0x1a67
 804859f:	83 ec 0c             	sub    esp,0xc
 80485a2:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
 80485a6:	8d b3 0c ff ff ff    	lea    esi,[ebx-0xf4]
 80485ac:	e8 a3 fd ff ff       	call   8048354 <_init>
 80485b1:	8d 83 08 ff ff ff    	lea    eax,[ebx-0xf8]
 80485b7:	29 c6                	sub    esi,eax
 80485b9:	c1 fe 02             	sar    esi,0x2
 80485bc:	85 f6                	test   esi,esi
 80485be:	74 25                	je     80485e5 <__libc_csu_init+0x55>
 80485c0:	31 ff                	xor    edi,edi
 80485c2:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
 80485c8:	83 ec 04             	sub    esp,0x4
 80485cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 80485cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 80485d3:	55                   	push   ebp
 80485d4:	ff 94 bb 08 ff ff ff 	call   DWORD PTR [ebx+edi*4-0xf8]
 80485db:	83 c7 01             	add    edi,0x1
 80485de:	83 c4 10             	add    esp,0x10
 80485e1:	39 f7                	cmp    edi,esi
 80485e3:	75 e3                	jne    80485c8 <__libc_csu_init+0x38>
 80485e5:	83 c4 0c             	add    esp,0xc
 80485e8:	5b                   	pop    ebx
 80485e9:	5e                   	pop    esi
 80485ea:	5f                   	pop    edi
 80485eb:	5d                   	pop    ebp
 80485ec:	c3                   	ret    
 80485ed:	8d 76 00             	lea    esi,[esi+0x0]

080485f0 <__libc_csu_fini>:
 80485f0:	f3 c3                	repz ret 

セクション .fini の逆アセンブル:

080485f4 <_fini>:
 80485f4:	53                   	push   ebx
 80485f5:	83 ec 08             	sub    esp,0x8
 80485f8:	e8 23 fe ff ff       	call   8048420 <__x86.get_pc_thunk.bx>
 80485fd:	81 c3 03 1a 00 00    	add    ebx,0x1a03
 8048603:	83 c4 08             	add    esp,0x8
 8048606:	5b                   	pop    ebx
 8048607:	c3                   	ret    
