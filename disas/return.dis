
return:     ファイル形式 elf32-i386


セクション .init の逆アセンブル:

0804828c <_init>:
 804828c:	53                   	push   ebx
 804828d:	83 ec 08             	sub    esp,0x8
 8048290:	e8 7b 00 00 00       	call   8048310 <__x86.get_pc_thunk.bx>
 8048295:	81 c3 6b 1d 00 00    	add    ebx,0x1d6b
 804829b:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
 80482a1:	85 c0                	test   eax,eax
 80482a3:	74 05                	je     80482aa <_init+0x1e>
 80482a5:	e8 26 00 00 00       	call   80482d0 <__libc_start_main@plt+0x10>
 80482aa:	83 c4 08             	add    esp,0x8
 80482ad:	5b                   	pop    ebx
 80482ae:	c3                   	ret    

セクション .plt の逆アセンブル:

080482b0 <__libc_start_main@plt-0x10>:
 80482b0:	ff 35 04 a0 04 08    	push   DWORD PTR ds:0x804a004
 80482b6:	ff 25 08 a0 04 08    	jmp    DWORD PTR ds:0x804a008
 80482bc:	00 00                	add    BYTE PTR [eax],al
	...

080482c0 <__libc_start_main@plt>:
 80482c0:	ff 25 0c a0 04 08    	jmp    DWORD PTR ds:0x804a00c
 80482c6:	68 00 00 00 00       	push   0x0
 80482cb:	e9 e0 ff ff ff       	jmp    80482b0 <_init+0x24>

セクション .plt.got の逆アセンブル:

080482d0 <.plt.got>:
 80482d0:	ff 25 fc 9f 04 08    	jmp    DWORD PTR ds:0x8049ffc
 80482d6:	66 90                	xchg   ax,ax

セクション .text の逆アセンブル:

080482e0 <_start>:
 80482e0:	31 ed                	xor    ebp,ebp
 80482e2:	5e                   	pop    esi
 80482e3:	89 e1                	mov    ecx,esp
 80482e5:	83 e4 f0             	and    esp,0xfffffff0
 80482e8:	50                   	push   eax
 80482e9:	54                   	push   esp
 80482ea:	52                   	push   edx
 80482eb:	68 50 84 04 08       	push   0x8048450
 80482f0:	68 f0 83 04 08       	push   0x80483f0
 80482f5:	51                   	push   ecx
 80482f6:	56                   	push   esi
 80482f7:	68 db 83 04 08       	push   0x80483db
 80482fc:	e8 bf ff ff ff       	call   80482c0 <__libc_start_main@plt>
 8048301:	f4                   	hlt    
 8048302:	66 90                	xchg   ax,ax
 8048304:	66 90                	xchg   ax,ax
 8048306:	66 90                	xchg   ax,ax
 8048308:	66 90                	xchg   ax,ax
 804830a:	66 90                	xchg   ax,ax
 804830c:	66 90                	xchg   ax,ax
 804830e:	66 90                	xchg   ax,ax

08048310 <__x86.get_pc_thunk.bx>:
 8048310:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 8048313:	c3                   	ret    
 8048314:	66 90                	xchg   ax,ax
 8048316:	66 90                	xchg   ax,ax
 8048318:	66 90                	xchg   ax,ax
 804831a:	66 90                	xchg   ax,ax
 804831c:	66 90                	xchg   ax,ax
 804831e:	66 90                	xchg   ax,ax

08048320 <deregister_tm_clones>:
 8048320:	b8 1b a0 04 08       	mov    eax,0x804a01b
 8048325:	2d 18 a0 04 08       	sub    eax,0x804a018
 804832a:	83 f8 06             	cmp    eax,0x6
 804832d:	76 1a                	jbe    8048349 <deregister_tm_clones+0x29>
 804832f:	b8 00 00 00 00       	mov    eax,0x0
 8048334:	85 c0                	test   eax,eax
 8048336:	74 11                	je     8048349 <deregister_tm_clones+0x29>
 8048338:	55                   	push   ebp
 8048339:	89 e5                	mov    ebp,esp
 804833b:	83 ec 14             	sub    esp,0x14
 804833e:	68 18 a0 04 08       	push   0x804a018
 8048343:	ff d0                	call   eax
 8048345:	83 c4 10             	add    esp,0x10
 8048348:	c9                   	leave  
 8048349:	f3 c3                	repz ret 
 804834b:	90                   	nop
 804834c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

08048350 <register_tm_clones>:
 8048350:	b8 18 a0 04 08       	mov    eax,0x804a018
 8048355:	2d 18 a0 04 08       	sub    eax,0x804a018
 804835a:	c1 f8 02             	sar    eax,0x2
 804835d:	89 c2                	mov    edx,eax
 804835f:	c1 ea 1f             	shr    edx,0x1f
 8048362:	01 d0                	add    eax,edx
 8048364:	d1 f8                	sar    eax,1
 8048366:	74 1b                	je     8048383 <register_tm_clones+0x33>
 8048368:	ba 00 00 00 00       	mov    edx,0x0
 804836d:	85 d2                	test   edx,edx
 804836f:	74 12                	je     8048383 <register_tm_clones+0x33>
 8048371:	55                   	push   ebp
 8048372:	89 e5                	mov    ebp,esp
 8048374:	83 ec 10             	sub    esp,0x10
 8048377:	50                   	push   eax
 8048378:	68 18 a0 04 08       	push   0x804a018
 804837d:	ff d2                	call   edx
 804837f:	83 c4 10             	add    esp,0x10
 8048382:	c9                   	leave  
 8048383:	f3 c3                	repz ret 
 8048385:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
 8048389:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

08048390 <__do_global_dtors_aux>:
 8048390:	80 3d 18 a0 04 08 00 	cmp    BYTE PTR ds:0x804a018,0x0
 8048397:	75 13                	jne    80483ac <__do_global_dtors_aux+0x1c>
 8048399:	55                   	push   ebp
 804839a:	89 e5                	mov    ebp,esp
 804839c:	83 ec 08             	sub    esp,0x8
 804839f:	e8 7c ff ff ff       	call   8048320 <deregister_tm_clones>
 80483a4:	c6 05 18 a0 04 08 01 	mov    BYTE PTR ds:0x804a018,0x1
 80483ab:	c9                   	leave  
 80483ac:	f3 c3                	repz ret 
 80483ae:	66 90                	xchg   ax,ax

080483b0 <frame_dummy>:
 80483b0:	b8 10 9f 04 08       	mov    eax,0x8049f10
 80483b5:	8b 10                	mov    edx,DWORD PTR [eax]
 80483b7:	85 d2                	test   edx,edx
 80483b9:	75 05                	jne    80483c0 <frame_dummy+0x10>
 80483bb:	eb 93                	jmp    8048350 <register_tm_clones>
 80483bd:	8d 76 00             	lea    esi,[esi+0x0]
 80483c0:	ba 00 00 00 00       	mov    edx,0x0
 80483c5:	85 d2                	test   edx,edx
 80483c7:	74 f2                	je     80483bb <frame_dummy+0xb>
 80483c9:	55                   	push   ebp
 80483ca:	89 e5                	mov    ebp,esp
 80483cc:	83 ec 14             	sub    esp,0x14
 80483cf:	50                   	push   eax
 80483d0:	ff d2                	call   edx
 80483d2:	83 c4 10             	add    esp,0x10
 80483d5:	c9                   	leave  
 80483d6:	e9 75 ff ff ff       	jmp    8048350 <register_tm_clones>

080483db <main>:
 80483db:	55                   	push   ebp
 80483dc:	89 e5                	mov    ebp,esp
 80483de:	b8 00 00 00 00       	mov    eax,0x0
 80483e3:	5d                   	pop    ebp
 80483e4:	c3                   	ret    
 80483e5:	66 90                	xchg   ax,ax
 80483e7:	66 90                	xchg   ax,ax
 80483e9:	66 90                	xchg   ax,ax
 80483eb:	66 90                	xchg   ax,ax
 80483ed:	66 90                	xchg   ax,ax
 80483ef:	90                   	nop

080483f0 <__libc_csu_init>:
 80483f0:	55                   	push   ebp
 80483f1:	57                   	push   edi
 80483f2:	56                   	push   esi
 80483f3:	53                   	push   ebx
 80483f4:	e8 17 ff ff ff       	call   8048310 <__x86.get_pc_thunk.bx>
 80483f9:	81 c3 07 1c 00 00    	add    ebx,0x1c07
 80483ff:	83 ec 0c             	sub    esp,0xc
 8048402:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
 8048406:	8d b3 0c ff ff ff    	lea    esi,[ebx-0xf4]
 804840c:	e8 7b fe ff ff       	call   804828c <_init>
 8048411:	8d 83 08 ff ff ff    	lea    eax,[ebx-0xf8]
 8048417:	29 c6                	sub    esi,eax
 8048419:	c1 fe 02             	sar    esi,0x2
 804841c:	85 f6                	test   esi,esi
 804841e:	74 25                	je     8048445 <__libc_csu_init+0x55>
 8048420:	31 ff                	xor    edi,edi
 8048422:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
 8048428:	83 ec 04             	sub    esp,0x4
 804842b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 804842f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 8048433:	55                   	push   ebp
 8048434:	ff 94 bb 08 ff ff ff 	call   DWORD PTR [ebx+edi*4-0xf8]
 804843b:	83 c7 01             	add    edi,0x1
 804843e:	83 c4 10             	add    esp,0x10
 8048441:	39 f7                	cmp    edi,esi
 8048443:	75 e3                	jne    8048428 <__libc_csu_init+0x38>
 8048445:	83 c4 0c             	add    esp,0xc
 8048448:	5b                   	pop    ebx
 8048449:	5e                   	pop    esi
 804844a:	5f                   	pop    edi
 804844b:	5d                   	pop    ebp
 804844c:	c3                   	ret    
 804844d:	8d 76 00             	lea    esi,[esi+0x0]

08048450 <__libc_csu_fini>:
 8048450:	f3 c3                	repz ret 

セクション .fini の逆アセンブル:

08048454 <_fini>:
 8048454:	53                   	push   ebx
 8048455:	83 ec 08             	sub    esp,0x8
 8048458:	e8 b3 fe ff ff       	call   8048310 <__x86.get_pc_thunk.bx>
 804845d:	81 c3 a3 1b 00 00    	add    ebx,0x1ba3
 8048463:	83 c4 08             	add    esp,0x8
 8048466:	5b                   	pop    ebx
 8048467:	c3                   	ret    
