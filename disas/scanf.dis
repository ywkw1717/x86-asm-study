
scanf:     ファイル形式 elf32-i386


セクション .init の逆アセンブル:

08048334 <_init>:
 8048334:	53                   	push   ebx
 8048335:	83 ec 08             	sub    esp,0x8
 8048338:	e8 b3 00 00 00       	call   80483f0 <__x86.get_pc_thunk.bx>
 804833d:	81 c3 c3 1c 00 00    	add    ebx,0x1cc3
 8048343:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
 8048349:	85 c0                	test   eax,eax
 804834b:	74 05                	je     8048352 <_init+0x1e>
 804834d:	e8 5e 00 00 00       	call   80483b0 <__isoc99_scanf@plt+0x10>
 8048352:	83 c4 08             	add    esp,0x8
 8048355:	5b                   	pop    ebx
 8048356:	c3                   	ret    

セクション .plt の逆アセンブル:

08048360 <printf@plt-0x10>:
 8048360:	ff 35 04 a0 04 08    	push   DWORD PTR ds:0x804a004
 8048366:	ff 25 08 a0 04 08    	jmp    DWORD PTR ds:0x804a008
 804836c:	00 00                	add    BYTE PTR [eax],al
	...

08048370 <printf@plt>:
 8048370:	ff 25 0c a0 04 08    	jmp    DWORD PTR ds:0x804a00c
 8048376:	68 00 00 00 00       	push   0x0
 804837b:	e9 e0 ff ff ff       	jmp    8048360 <_init+0x2c>

08048380 <__stack_chk_fail@plt>:
 8048380:	ff 25 10 a0 04 08    	jmp    DWORD PTR ds:0x804a010
 8048386:	68 08 00 00 00       	push   0x8
 804838b:	e9 d0 ff ff ff       	jmp    8048360 <_init+0x2c>

08048390 <__libc_start_main@plt>:
 8048390:	ff 25 14 a0 04 08    	jmp    DWORD PTR ds:0x804a014
 8048396:	68 10 00 00 00       	push   0x10
 804839b:	e9 c0 ff ff ff       	jmp    8048360 <_init+0x2c>

080483a0 <__isoc99_scanf@plt>:
 80483a0:	ff 25 18 a0 04 08    	jmp    DWORD PTR ds:0x804a018
 80483a6:	68 18 00 00 00       	push   0x18
 80483ab:	e9 b0 ff ff ff       	jmp    8048360 <_init+0x2c>

セクション .plt.got の逆アセンブル:

080483b0 <.plt.got>:
 80483b0:	ff 25 fc 9f 04 08    	jmp    DWORD PTR ds:0x8049ffc
 80483b6:	66 90                	xchg   ax,ax

セクション .text の逆アセンブル:

080483c0 <_start>:
 80483c0:	31 ed                	xor    ebp,ebp
 80483c2:	5e                   	pop    esi
 80483c3:	89 e1                	mov    ecx,esp
 80483c5:	83 e4 f0             	and    esp,0xfffffff0
 80483c8:	50                   	push   eax
 80483c9:	54                   	push   esp
 80483ca:	52                   	push   edx
 80483cb:	68 90 85 04 08       	push   0x8048590
 80483d0:	68 30 85 04 08       	push   0x8048530
 80483d5:	51                   	push   ecx
 80483d6:	56                   	push   esi
 80483d7:	68 bb 84 04 08       	push   0x80484bb
 80483dc:	e8 af ff ff ff       	call   8048390 <__libc_start_main@plt>
 80483e1:	f4                   	hlt    
 80483e2:	66 90                	xchg   ax,ax
 80483e4:	66 90                	xchg   ax,ax
 80483e6:	66 90                	xchg   ax,ax
 80483e8:	66 90                	xchg   ax,ax
 80483ea:	66 90                	xchg   ax,ax
 80483ec:	66 90                	xchg   ax,ax
 80483ee:	66 90                	xchg   ax,ax

080483f0 <__x86.get_pc_thunk.bx>:
 80483f0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 80483f3:	c3                   	ret    
 80483f4:	66 90                	xchg   ax,ax
 80483f6:	66 90                	xchg   ax,ax
 80483f8:	66 90                	xchg   ax,ax
 80483fa:	66 90                	xchg   ax,ax
 80483fc:	66 90                	xchg   ax,ax
 80483fe:	66 90                	xchg   ax,ax

08048400 <deregister_tm_clones>:
 8048400:	b8 27 a0 04 08       	mov    eax,0x804a027
 8048405:	2d 24 a0 04 08       	sub    eax,0x804a024
 804840a:	83 f8 06             	cmp    eax,0x6
 804840d:	76 1a                	jbe    8048429 <deregister_tm_clones+0x29>
 804840f:	b8 00 00 00 00       	mov    eax,0x0
 8048414:	85 c0                	test   eax,eax
 8048416:	74 11                	je     8048429 <deregister_tm_clones+0x29>
 8048418:	55                   	push   ebp
 8048419:	89 e5                	mov    ebp,esp
 804841b:	83 ec 14             	sub    esp,0x14
 804841e:	68 24 a0 04 08       	push   0x804a024
 8048423:	ff d0                	call   eax
 8048425:	83 c4 10             	add    esp,0x10
 8048428:	c9                   	leave  
 8048429:	f3 c3                	repz ret 
 804842b:	90                   	nop
 804842c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

08048430 <register_tm_clones>:
 8048430:	b8 24 a0 04 08       	mov    eax,0x804a024
 8048435:	2d 24 a0 04 08       	sub    eax,0x804a024
 804843a:	c1 f8 02             	sar    eax,0x2
 804843d:	89 c2                	mov    edx,eax
 804843f:	c1 ea 1f             	shr    edx,0x1f
 8048442:	01 d0                	add    eax,edx
 8048444:	d1 f8                	sar    eax,1
 8048446:	74 1b                	je     8048463 <register_tm_clones+0x33>
 8048448:	ba 00 00 00 00       	mov    edx,0x0
 804844d:	85 d2                	test   edx,edx
 804844f:	74 12                	je     8048463 <register_tm_clones+0x33>
 8048451:	55                   	push   ebp
 8048452:	89 e5                	mov    ebp,esp
 8048454:	83 ec 10             	sub    esp,0x10
 8048457:	50                   	push   eax
 8048458:	68 24 a0 04 08       	push   0x804a024
 804845d:	ff d2                	call   edx
 804845f:	83 c4 10             	add    esp,0x10
 8048462:	c9                   	leave  
 8048463:	f3 c3                	repz ret 
 8048465:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
 8048469:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

08048470 <__do_global_dtors_aux>:
 8048470:	80 3d 24 a0 04 08 00 	cmp    BYTE PTR ds:0x804a024,0x0
 8048477:	75 13                	jne    804848c <__do_global_dtors_aux+0x1c>
 8048479:	55                   	push   ebp
 804847a:	89 e5                	mov    ebp,esp
 804847c:	83 ec 08             	sub    esp,0x8
 804847f:	e8 7c ff ff ff       	call   8048400 <deregister_tm_clones>
 8048484:	c6 05 24 a0 04 08 01 	mov    BYTE PTR ds:0x804a024,0x1
 804848b:	c9                   	leave  
 804848c:	f3 c3                	repz ret 
 804848e:	66 90                	xchg   ax,ax

08048490 <frame_dummy>:
 8048490:	b8 10 9f 04 08       	mov    eax,0x8049f10
 8048495:	8b 10                	mov    edx,DWORD PTR [eax]
 8048497:	85 d2                	test   edx,edx
 8048499:	75 05                	jne    80484a0 <frame_dummy+0x10>
 804849b:	eb 93                	jmp    8048430 <register_tm_clones>
 804849d:	8d 76 00             	lea    esi,[esi+0x0]
 80484a0:	ba 00 00 00 00       	mov    edx,0x0
 80484a5:	85 d2                	test   edx,edx
 80484a7:	74 f2                	je     804849b <frame_dummy+0xb>
 80484a9:	55                   	push   ebp
 80484aa:	89 e5                	mov    ebp,esp
 80484ac:	83 ec 14             	sub    esp,0x14
 80484af:	50                   	push   eax
 80484b0:	ff d2                	call   edx
 80484b2:	83 c4 10             	add    esp,0x10
 80484b5:	c9                   	leave
 80484b6:	e9 75 ff ff ff       	jmp    8048430 <register_tm_clones>

080484bb <main>:
 80484bb:	8d 4c 24 04          	lea    ecx,[esp+0x4]
 80484bf:	83 e4 f0             	and    esp,0xfffffff0
 80484c2:	ff 71 fc             	push   DWORD PTR [ecx-0x4]
 80484c5:	55                   	push   ebp     # スタックフレームの
 80484c6:	89 e5                	mov    ebp,esp # 生成
 80484c8:	51                   	push   ecx
 80484c9:	83 ec 14             	sub    esp,0x14 # espから値を引き、20バイト分スタック上に確保, int???
 80484cc:	65 a1 14 00 00 00    	mov    eax,gs:0x14
 80484d2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax # ebp-0xc is num
 80484d5:	31 c0                	xor    eax,eax # eax を 0 で初期化
 80484d7:	83 ec 0c             	sub    esp,0xc
 80484da:	68 b0 85 04 08       	push   0x80485b0 # "inpt: "
 80484df:	e8 8c fe ff ff       	call   8048370 <printf@plt> # printf
 80484e4:	83 c4 10             	add    esp,0x10 # 仮引数分のメモリを解放
 80484e7:	83 ec 08             	sub    esp,0x8
 80484ea:	8d 45 f0             	lea    eax,[ebp-0x10] # numのアドレス？
 80484ed:	50                   	push   eax
 80484ee:	68 b8 85 04 08       	push   0x80485b8
 80484f3:	e8 a8 fe ff ff       	call   80483a0 <__isoc99_scanf@plt> # scanf
 80484f8:	83 c4 10             	add    esp,0x1 # 仮引数分のメモリを解放0
 80484fb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10] # numのアドレス？
 80484fe:	83 ec 08             	sub    esp,0x8
 8048501:	50                   	push   eax # numを引数へ
 8048502:	68 bb 85 04 08       	push   0x80485bb
 8048507:	e8 64 fe ff ff       	call   8048370 <printf@plt> # printf
 804850c:	83 c4 10             	add    esp,0x10 # 仮引数分のメモリを解放
 804850f:	b8 00 00 00 00       	mov    eax,0x0 # return 0
 8048514:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
 8048517:	65 33 15 14 00 00 00 	xor    edx,DWORD PTR gs:0x14
 804851e:	74 05                	je     8048525 <main+0x6a>
 8048520:	e8 5b fe ff ff       	call   8048380 <__stack_chk_fail@plt>
 8048525:	8b 4d fc             	mov    ecx,DWORD PTR [ebp-0x4]
 8048528:	c9                   	leave  
 8048529:	8d 61 fc             	lea    esp,[ecx-0x4]
 804852c:	c3                   	ret    
 804852d:	66 90                	xchg   ax,ax
 804852f:	90                   	nop

08048530 <__libc_csu_init>:
 8048530:	55                   	push   ebp
 8048531:	57                   	push   edi
 8048532:	56                   	push   esi
 8048533:	53                   	push   ebx
 8048534:	e8 b7 fe ff ff       	call   80483f0 <__x86.get_pc_thunk.bx>
 8048539:	81 c3 c7 1a 00 00    	add    ebx,0x1ac7
 804853f:	83 ec 0c             	sub    esp,0xc
 8048542:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
 8048546:	8d b3 0c ff ff ff    	lea    esi,[ebx-0xf4]
 804854c:	e8 e3 fd ff ff       	call   8048334 <_init>
 8048551:	8d 83 08 ff ff ff    	lea    eax,[ebx-0xf8]
 8048557:	29 c6                	sub    esi,eax
 8048559:	c1 fe 02             	sar    esi,0x2
 804855c:	85 f6                	test   esi,esi
 804855e:	74 25                	je     8048585 <__libc_csu_init+0x55>
 8048560:	31 ff                	xor    edi,edi
 8048562:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
 8048568:	83 ec 04             	sub    esp,0x4
 804856b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 804856f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 8048573:	55                   	push   ebp
 8048574:	ff 94 bb 08 ff ff ff 	call   DWORD PTR [ebx+edi*4-0xf8]
 804857b:	83 c7 01             	add    edi,0x1
 804857e:	83 c4 10             	add    esp,0x10
 8048581:	39 f7                	cmp    edi,esi
 8048583:	75 e3                	jne    8048568 <__libc_csu_init+0x38>
 8048585:	83 c4 0c             	add    esp,0xc
 8048588:	5b                   	pop    ebx
 8048589:	5e                   	pop    esi
 804858a:	5f                   	pop    edi
 804858b:	5d                   	pop    ebp
 804858c:	c3                   	ret    
 804858d:	8d 76 00             	lea    esi,[esi+0x0]

08048590 <__libc_csu_fini>:
 8048590:	f3 c3                	repz ret 

セクション .fini の逆アセンブル:

08048594 <_fini>:
 8048594:	53                   	push   ebx
 8048595:	83 ec 08             	sub    esp,0x8
 8048598:	e8 53 fe ff ff       	call   80483f0 <__x86.get_pc_thunk.bx>
 804859d:	81 c3 63 1a 00 00    	add    ebx,0x1a63
 80485a3:	83 c4 08             	add    esp,0x8
 80485a6:	5b                   	pop    ebx
 80485a7:	c3                   	ret    
